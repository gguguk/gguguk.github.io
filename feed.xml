<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://gguguk.github.io/</id><title>생각과 고민.</title><subtitle>데이터 사이언스, 추천 시스템, Data Science, Recommender</subtitle> <updated>2025-08-31T18:13:30+09:00</updated> <author> <name>Gukwon Koo</name> <uri>https://gguguk.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://gguguk.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://gguguk.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 Gukwon Koo </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>T-SNE 이해하기</title><link href="https://gguguk.github.io/posts/tsne/" rel="alternate" type="text/html" title="T-SNE 이해하기" /><published>2025-08-30T14:52:00+09:00</published> <updated>2025-08-31T18:12:54+09:00</updated> <id>https://gguguk.github.io/posts/tsne/</id> <content src="https://gguguk.github.io/posts/tsne/" /> <author> <name>Gukwon Koo</name> </author> <category term="ML" /> <category term="Basic" /> <summary> T-SNE는 고차원의 임베딩을 저차원으로 변환하고 시각화화여 임베딩을 품질들 대략적으로 파악하는 것을 돕는 대표적인 차원 축소 알고리즘입니다. 실제로 아직도 현업에서도 많이 사용되는 알고리즘이고, 여러 논문에서도 임베딩의 질을 시각적으로 보여주기 위한 방법으로 많이 활용되고 있습니다. 그러나 어느 순간 T-SNE의 원리를 완벽하게 이해하지 못하고 사용하고 있다는 생각이 들었습니다. 🫠 앞으로 현업에서 임베딩을 다룰 일이 많아질 것 같은 느낌이 들어서 이번 기회에 정확한 동작 원리를 공부해보았습니다. 공부해보니 ML 기초 이론을 복습하기에도 좋은 알고리즘이라는 생각이 들더라구요. 앞으로 설명 드릴 내용은 다음의 배경 지식을 요구합니다. Gaussian distribution Student-T... </summary> </entry> <entry><title>IRSA의 원리를 파헤쳐보자 4 - OIDC</title><link href="https://gguguk.github.io/posts/OIDC/" rel="alternate" type="text/html" title="IRSA의 원리를 파헤쳐보자 4 - OIDC" /><published>2022-12-20T21:00:00+09:00</published> <updated>2023-01-19T21:49:51+09:00</updated> <id>https://gguguk.github.io/posts/OIDC/</id> <content src="https://gguguk.github.io/posts/OIDC/" /> <author> <name>Gukwon Koo</name> </author> <category term="MLOps" /> <category term="Kubernetes" /> <summary> 지난 글에서는 OAuth2.0를 살펴보았습니다. OAuth2.0을 이해해야 본 글에서 설명할 OIDC를 이해할 수 있습니다. OIDC는 인증(authentication)을 위한 프로토콜입니다. IRSA의 원리를 파헤쳐보자 시리즈 IRSA의 원리를 파헤쳐보자 1 - K8S Admission Webhook IRSA의 원리를 파헤쳐보자 2 - K8S Sevice Account와 Service Account Token Volume Projection IRSA의 원리를 파헤쳐보자 3 - OAuth2.0 IRSA의 원리를 파헤쳐보자 4 - OIDC IRSA의 원리를 파헤쳐보자 5 - IRSA Process OIDC(OpenID Connect) OIDC란? OIDC(OpenID C... </summary> </entry> <entry><title>IRSA의 원리를 파헤쳐보자 3 - OAuth2.0</title><link href="https://gguguk.github.io/posts/OAuth/" rel="alternate" type="text/html" title="IRSA의 원리를 파헤쳐보자 3 - OAuth2.0" /><published>2022-11-26T20:04:00+09:00</published> <updated>2022-12-20T21:47:01+09:00</updated> <id>https://gguguk.github.io/posts/OAuth/</id> <content src="https://gguguk.github.io/posts/OAuth/" /> <author> <name>Gukwon Koo</name> </author> <category term="MLOps" /> <category term="Kubernetes" /> <summary> IRSA의 원리를 파헤쳐보자 시리즈의 세번째 글입니다. 지난 시간에는 service account token volume projection에 대해서 살펴보았습니다. 핵심은 projected service account token은 기본 service account token과 다르게 audience나 만료기간 등의 추가적인 정보를 삽입할 수 있으며 OIDC token의 표준적인 형식을 따르게 된다는 점이었습니다. IRSA를 위해서는 sub, aud 등의 정보, 즉 신뢰할만한 개체에 대한 정보를 미리 작성해 두는데 AWS 측에서 토큰의 유효성을 검증하기 위해 필요한 정보를 주입시킨다는 점에서 중요합니다. 한편 IRSA를 공부하다 보면 id token, JWT에서 사용되는 단어들이 매우 많이 등장함을 ... </summary> </entry> <entry><title>IRSA의 원리를 파헤쳐보자 2 - K8S Sevice Account와 Service Account Token Volume Projection</title><link href="https://gguguk.github.io/posts/service_account_volume_projection/" rel="alternate" type="text/html" title="IRSA의 원리를 파헤쳐보자 2 - K8S Sevice Account와 Service Account Token Volume Projection" /><published>2022-10-26T22:12:00+09:00</published> <updated>2022-10-26T22:12:00+09:00</updated> <id>https://gguguk.github.io/posts/service_account_volume_projection/</id> <content src="https://gguguk.github.io/posts/service_account_volume_projection/" /> <author> <name>Gukwon Koo</name> </author> <category term="MLOps" /> <category term="Kubernetes" /> <category term="IRSA" /> <summary> IRSA의 원리를 파헤쳐보자 시리즈의 마지막 글입니다. 저번 글에서는 admission webhook을 학습했습니다. 요약하자면 EKS 클러스터를 설치하면 control plane에 pod identity webhook이라는 webhook server(일종의 API 서버)가 함께 배포되고, pod identity webhook은 서비스 어카운트에 iam arn이 annotation 되어 있으면 요청 내용을 변형하여 파드를 생성합니다. 생성된 파드에는 환경 변수와 토큰값이 저장되어 있어서 이를 활용해 AWS 리소스에 접근할 수 있게 됩니다. 이번 글에서는 파드에 생성되는 환경 변수와 토큰값이 무엇인지 살펴보고, 최종적으로 어떻게 파드가 AWS 리소스와 통신을 할 수 있게 되는지 살펴보겠습니다. IRS... </summary> </entry> <entry><title>IRSA의 원리를 파헤쳐보자 1 - K8S Admission Webhook</title><link href="https://gguguk.github.io/posts/admission_webhook/" rel="alternate" type="text/html" title="IRSA의 원리를 파헤쳐보자 1 - K8S Admission Webhook" /><published>2022-09-13T23:25:00+09:00</published> <updated>2022-09-22T20:56:50+09:00</updated> <id>https://gguguk.github.io/posts/admission_webhook/</id> <content src="https://gguguk.github.io/posts/admission_webhook/" /> <author> <name>Gukwon Koo</name> </author> <category term="MLOps" /> <category term="Kubernetes" /> <summary> IRSA(IAM Role for Service Account)는 AWS EKS에서 파드 단위로 권한을 관리하기 위한 방법 또는 프로세스입니다. 요즘에 회사에서 kubeflow를 셋팅하고 있는데 AWS의 특정 리소스(S3 등)와의 통신을 위해 파드에 일정 권한을 부여해야할 상황이 자주 발생합니다. 저는 이때 주로 IRSA를 활용하여 업무를 진행하고 있습니다. IRSA를 활용하면 권한 관리가 매우 수월하고, 보안과 관련된 사항이 노출될 위험도가 낮기 때문입니다. IRSA의 대안으로 Secret을 활용할 수 있습니다. 그러나 Secret은 namespaced resource 이므로 작업성이 더 떨어진다고 느껴져서 그다지 선호하지 않습니다(하지만 직관적인 방법인 것은 사실입니다). IRSA를 활용하는 것 자... </summary> </entry> </feed>
